import Foundation
import XCTest
import SwiftCheck

class SandboxTests: XCTestCase {
    func testAll() {
        // 'property' notation allows us to name our tests.  This becomes important
        // when they fail and SwiftCheck reports it in the console.
        property("Integer Equality is Reflexive") <- forAll { (i : Int) in
            return i == i
        }

        // Because Swift doesn't allow us to implement `Arbitrary` for certain types,
        // SwiftCheck instead implements 'modifier' types that wrap them.  Here,
        // `ArrayOf<T : Arbitrary>` generates random arrays of values of type `T`.
        property("The reverse of the reverse of an array is that array") <- forAll { (xs : ArrayOf<Int>) in
            // This property is using a number of SwiftCheck's more interesting
            // features.  `^&&^` is the conjunction operator for properties that turns
            // both properties into a larger property that only holds when both sub-properties
            // hold.  `<?>` is the labelling operator allowing us to name each sub-part
            // in output generated by SwiftCheck.  For example, this property reports:
            //
            // *** Passed 100 tests
            // (100% , Right identity, Left identity)
            return
            (xs.getArray.reversed().reversed() == xs.getArray) <?> "Left identity"
            ^&&^
            (xs.getArray == xs.getArray.reversed().reversed()) <?> "Right identity"
        }
    }
}
